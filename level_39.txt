7x5

0,0: +1
1,0: +2
2,0: +3
3,0: +4
4,0: +5
6,0: *3

0,1: +1
1,1: +2
2,1: +3
3,1: +4
4,1: +5
6,1: *4

0,2: +1
1,2: +2
2,2: +3
3,2: +4
4,2: +5
6,2: *5

0,3: +1
1,3: +2
2,3: +3
3,3: +4
4,3: +5
6,3: *7

0,4: +1
1,4: +2
2,4: +3
3,4: +4
4,4: +5
6,4: *9
--
row_0: total_39
row_1: total_28
row_2: total_60
row_3: total_42
row_4: total_135
# This constraint ends up blowing our solver out of the water...
# What I'd like to do is add a new way of doing "lazy" constraints
# which would allow us to generate by-constraint masks first, and then
# iterate over the rest in a brute-force fashion with a smaller pool
# to work with.  As it happens, our first found result using by-constraint
# happens to be correct, though, so I'm not doing it at the moment.
#count_19: 0,0 1,0 2,0 3,0 4,0 0,1 1,1 2,1 3,1 4,1 0,2 1,2 2,2 3,2 4,2 0,3 1,3 2,3 3,3 4,3 0,4 1,4 2,4 3,4 4,4
